g					10	// number of generations
popsize				8000	//population size
numits				1	// number of trials
printeverypop		0  // save printout of population at every generation
// Generation Settings 
sel					2	// 1: tournament 2: deterministic crowding 3: lexicase selection 4: age-fitness pareto algorithm
tourn_size			2
rt_rep				0.1
rt_cross			0.7
rt_mut				0.2
cross				1	// 1: ultra 2: one point 
cross_ar			.1 //crossover alternation rate (ultra only)
mut_ar				.1 //mutation alternation rate (ultra only)
stoperror			0.0001	// stop condition / convergence condition

init_validate_on	1	// initial fitness validation of starting population
train				1  // split data into training and validation sets

// Results
resultspath			D:\Develep\Results
loud				1
// Computer Settings
parallel			1
numcores			8

// Problem information
intvars				x	y
extvars					
cons				1	
cvals				1	
seeds				

ERC					0	// ephemeral random constants
ERCints				0	// use integers rather than floats
maxERC				1
minERC				-1
numERC				3

fit_type			3	// 1: error, 2: corr, 3: error/corr
max_fit				100000000000000000000
min_fit				0.00000000000000000001

//available operators: n	v	+	-	*	/	sin	cos	exp	log
//index                0	1	2	3	4	5	6	7	8	9

op_list				n	v	+	-	*	/	
op_weight			3	3	1	1	1	1					
weight_ops_on		1

min_len				10
max_len				50

max_dev_len			128

complex_measure		2	// 1: genotype size 2: symbolic size 3: effective genotype size

precision			0.0001

// Hill Climbing Settings

// generic line hill climber (Bongard)
lineHC_on			1
lineHC_its			1

// parameter Hill Climber
pHC_on				1
pHC_delay_on		1
pHC_delay			1
pHC_size			1
pHC_its				1
pHC_gauss			1

// epigenetic Hill Climber
eHC_on				1
eHC_its				5
eHC_prob			0.1
eHC_size			1
eHC_cluster			1
eHC_dev				1
eHC_best			1
eHC_init			.75 // percent of active genes in initial population
eHC_prob_scale		1
eHC_max_prob		.75
eHC_min_prob		0.25

// lexicase settings
lexpool				25
lexage				1 // use age survival
// Pareto settings

prto_arch_size		10
prto_sel_on			1

// island model
islands				1  // use islands of populations (parallelizes code)
island_gens			10 // number of generations of island isolation before mixing populations together